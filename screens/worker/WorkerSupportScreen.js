import { useState } from "react"
import { View, Text, TouchableOpacity, SafeAreaView, ScrollView, TextInput, Alert } from "react-native"
import { styles } from "../../styles/additional"
import { WorkerBottomNav } from "../../components/BottomNavigation"

const WorkerSupportScreen = ({ onTabPress, onBack }) => {
  const [activeTab, setActiveTab] = useState("faq")
  const [expandedFaq, setExpandedFaq] = useState(null)
  const [selectedCategory, setSelectedCategory] = useState(null)
  const [selectedPriority, setSelectedPriority] = useState("medium")
  const [contactForm, setContactForm] = useState({
    subject: "",
    message: "",
    email: "",
    phone: ""
  })

  const tabs = [
    { id: "faq", label: "FAQ" },
    { id: "contact", label: "Li√™n h·ªá" },
    { id: "guide", label: "H∆∞·ªõng d·∫´n" }
  ]

  const faqData = [
    {
      id: 1,
      question: "L√†m th·∫ø n√†o ƒë·ªÉ tƒÉng s·ªë l∆∞·ª£ng ƒë∆°n h√†ng?",
      answer: "ƒê·ªÉ tƒÉng s·ªë l∆∞·ª£ng ƒë∆°n h√†ng, b·∫°n n√™n: 1) M·ªü r·ªông khu v·ª±c l√†m vi·ªác, 2) C·∫≠p nh·∫≠t th√¥ng tin v√† k·ªπ nƒÉng th∆∞·ªùng xuy√™n, 3) Duy tr√¨ ƒë√°nh gi√° cao t·ª´ kh√°ch h√†ng, 4) Ph·∫£n h·ªìi nhanh ch√≥ng khi c√≥ ƒë∆°n m·ªõi."
    },
    {
      id: 2,
      question: "T√¥i c√≥ th·ªÉ thay ƒë·ªïi gi√° d·ªãch v·ª• kh√¥ng?",
      answer: "C√≥, b·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh gi√° d·ªãch v·ª• trong ph·∫ßn C√†i ƒë·∫∑t > Th√¥ng tin ngh·ªÅ nghi·ªáp. Tuy nhi√™n, n√™n c√¢n nh·∫Øc k·ªπ ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn kh·∫£ nƒÉng c·∫°nh tranh."
    },
    {
      id: 3,
      question: "Khi n√†o t√¥i nh·∫≠n ƒë∆∞·ª£c thanh to√°n?",
      answer: "Thanh to√°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn v√†o t√†i kho·∫£n c·ªßa b·∫°n trong v√≤ng 24-48 gi·ªù sau khi ƒë∆°n h√†ng ƒë∆∞·ª£c ho√†n th√†nh v√† kh√°ch h√†ng x√°c nh·∫≠n."
    },
    {
      id: 4,
      question: "L√†m sao ƒë·ªÉ x·ª≠ l√Ω khi·∫øu n·∫°i t·ª´ kh√°ch h√†ng?",
      answer: "Khi c√≥ khi·∫øu n·∫°i, h√£y: 1) L·∫Øng nghe v√† th·∫•u hi·ªÉu v·∫•n ƒë·ªÅ, 2) Xin l·ªói v√† ƒë∆∞a ra gi·∫£i ph√°p kh·∫Øc ph·ª•c, 3) Li√™n h·ªá b·ªô ph·∫≠n h·ªó tr·ª£ n·∫øu c·∫ßn thi·∫øt, 4) R√∫t kinh nghi·ªám cho l·∫ßn sau."
    }
  ]

  const supportCategories = [
    { id: "technical", title: "K·ªπ thu·∫≠t", description: "L·ªói ·ª©ng d·ª•ng, ƒëƒÉng nh·∫≠p", icon: "üîß" },
    { id: "payment", title: "Thanh to√°n", description: "V·∫•n ƒë·ªÅ v·ªÅ ti·ªÅn", icon: "üí∞" },
    { id: "order", title: "ƒê∆°n h√†ng", description: "Qu·∫£n l√Ω ƒë∆°n h√†ng", icon: "üìã" },
    { id: "account", title: "T√†i kho·∫£n", description: "Th√¥ng tin c√° nh√¢n", icon: "üë§" }
  ]

  const priorityOptions = [
    { id: "low", label: "Th·∫•p", color: "#10b981" },
    { id: "medium", label: "Trung b√¨nh", color: "#f59e0b" },
    { id: "high", label: "Cao", color: "#ef4444" }
  ]

  const toggleFaq = (faqId) => {
    setExpandedFaq(expandedFaq === faqId ? null : faqId)
  }

  const handleQuickSupport = (type) => {
    switch(type) {
      case "call":
        Alert.alert("G·ªçi h·ªó tr·ª£", "S·ªë ƒëi·ªán tho·∫°i: 1900-1234")
        break
      case "chat":
        Alert.alert("Chat tr·ª±c tuy·∫øn", "T√≠nh nƒÉng chat ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn")
        break
      default:
        break
    }
  }

  const handleSubmitContact = () => {
    if (!contactForm.subject || !contactForm.message) {
      Alert.alert("L·ªói", "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin")
      return
    }
    Alert.alert("Th√†nh c√¥ng", "Y√™u c·∫ßu h·ªó tr·ª£ ƒë√£ ƒë∆∞·ª£c g·ª≠i. Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi trong 24h.")
    setContactForm({ subject: "", message: "", email: "", phone: "" })
  }

  const renderTabContent = () => {
    switch(activeTab) {
      case "faq":
        return (
          <View>
            {/* Quick Support */}
            <View style={styles.quickSupportSection}>
              <Text style={styles.sectionTitle}>H·ªó tr·ª£ nhanh</Text>
              <View style={styles.quickSupportButtons}>
                <TouchableOpacity 
                  style={styles.quickSupportButton}
                  onPress={() => handleQuickSupport("call")}
                >
                  <Text style={styles.quickSupportIcon}>üìû</Text>
                  <Text style={styles.quickSupportText}>G·ªçi ngay</Text>
                  <Text style={styles.quickSupportSubtext}>1900-1234</Text>
                </TouchableOpacity>
                <TouchableOpacity 
                  style={styles.quickSupportButton}
                  onPress={() => handleQuickSupport("chat")}
                >
                  <Text style={styles.quickSupportIcon}>üí¨</Text>
                  <Text style={styles.quickSupportText}>Chat tr·ª±c tuy·∫øn</Text>
                  <Text style={styles.quickSupportSubtext}>8:00 - 22:00</Text>
                </TouchableOpacity>
              </View>
            </View>

            {/* FAQ */}
            <View style={styles.faqSection}>
              <Text style={styles.sectionTitle}>C√¢u h·ªèi th∆∞·ªùng g·∫∑p</Text>
              <View style={styles.faqContainer}>
                {faqData.map((faq) => (
                  <View key={faq.id} style={styles.faqItem}>
                    <TouchableOpacity 
                      style={styles.faqQuestion}
                      onPress={() => toggleFaq(faq.id)}
                    >
                      <Text style={styles.faqQuestionText}>{faq.question}</Text>
                      <Text style={styles.faqArrow}>
                        {expandedFaq === faq.id ? "‚àí" : "+"}
                      </Text>
                    </TouchableOpacity>
                    {expandedFaq === faq.id && (
                      <View style={styles.faqAnswer}>
                        <Text style={styles.faqAnswerText}>{faq.answer}</Text>
                      </View>
                    )}
                  </View>
                ))}
              </View>
            </View>
          </View>
        )

      case "contact":
        return (
          <View>
            {/* Support Categories */}
            <View style={styles.supportCategoriesSection}>
              <Text style={styles.sectionTitle}>Ch·ªçn lo·∫°i h·ªó tr·ª£</Text>
              <View style={styles.supportCategoriesGrid}>
                {supportCategories.map((category) => (
                  <TouchableOpacity
                    key={category.id}
                    style={[
                      styles.supportCategoryCard,
                      selectedCategory === category.id && styles.selectedSupportCategory
                    ]}
                    onPress={() => setSelectedCategory(category.id)}
                  >
                    <Text style={styles.supportCategoryIcon}>{category.icon}</Text>
                    <Text style={styles.supportCategoryTitle}>{category.title}</Text>
                    <Text style={styles.supportCategoryDescription}>{category.description}</Text>
                  </TouchableOpacity>
                ))}
              </View>
            </View>

            {/* Contact Form */}
            <View style={styles.contactFormSection}>
              <Text style={styles.sectionTitle}>G·ª≠i y√™u c·∫ßu h·ªó tr·ª£</Text>
              <View style={styles.contactForm}>
                <View style={styles.formGroup}>
                  <Text style={styles.formLabel}>Ti√™u ƒë·ªÅ *</Text>
                  <TextInput
                    style={styles.contactInput}
                    value={contactForm.subject}
                    onChangeText={(text) => setContactForm(prev => ({...prev, subject: text}))}
                    placeholder="M√¥ t·∫£ ng·∫Øn g·ªçn v·∫•n ƒë·ªÅ"
                  />
                </View>

                <View style={styles.formGroup}>
                  <Text style={styles.formLabel}>M√¥ t·∫£ chi ti·∫øt *</Text>
                  <TextInput
                    style={[styles.contactInput, styles.contactTextArea]}
                    value={contactForm.message}
                    onChangeText={(text) => setContactForm(prev => ({...prev, message: text}))}
                    placeholder="M√¥ t·∫£ chi ti·∫øt v·∫•n ƒë·ªÅ b·∫°n g·∫∑p ph·∫£i"
                    multiline
                  />
                </View>

                <View style={styles.formGroup}>
                  <Text style={styles.formLabel}>Email li√™n h·ªá</Text>
                  <TextInput
                    style={styles.contactInput}
                    value={contactForm.email}
                    onChangeText={(text) => setContactForm(prev => ({...prev, email: text}))}
                    placeholder="email@example.com"
                    keyboardType="email-address"
                  />
                </View>

                <View style={styles.formGroup}>
                  <Text style={styles.formLabel}>S·ªë ƒëi·ªán tho·∫°i</Text>
                  <TextInput
                    style={styles.contactInput}
                    value={contactForm.phone}
                    onChangeText={(text) => setContactForm(prev => ({...prev, phone: text}))}
                    placeholder="0123456789"
                    keyboardType="phone-pad"
                  />
                </View>

                <View style={styles.formGroup}>
                  <Text style={styles.formLabel}>M·ª©c ƒë·ªô ∆∞u ti√™n</Text>
                  <View style={styles.prioritySelector}>
                    {priorityOptions.map((priority) => (
                      <TouchableOpacity
                        key={priority.id}
                        style={[
                          styles.priorityButton,
                          { borderColor: priority.color },
                          selectedPriority === priority.id && styles.selectedPriorityButton
                        ]}
                        onPress={() => setSelectedPriority(priority.id)}
                      >
                        <Text style={[
                          styles.priorityButtonText,
                          { color: priority.color }
                        ]}>
                          {priority.label}
                        </Text>
                      </TouchableOpacity>
                    ))}
                  </View>
                </View>

                <TouchableOpacity 
                  style={styles.submitContactButton}
                  onPress={handleSubmitContact}
                >
                  <Text style={styles.submitContactButtonText}>G·ª≠i y√™u c·∫ßu</Text>
                </TouchableOpacity>
              </View>
            </View>
          </View>
        )

      case "guide":
        return (
          <View style={styles.supportTipsSection}>
            <View style={styles.supportTips}>
              <Text style={styles.supportTipsTitle}>üìñ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</Text>
              <Text style={styles.supportTipsText}>
                <Text style={{fontWeight: 'bold'}}>1. Qu·∫£n l√Ω ƒë∆°n h√†ng:{'\n'}</Text>
                ‚Ä¢ Ki·ªÉm tra ƒë∆°n m·ªõi trong tab "ƒê∆°n h√†ng"{'\n'}
                ‚Ä¢ Ch·∫•p nh·∫≠n ho·∫∑c t·ª´ ch·ªëi ƒë∆°n trong th·ªùi gian quy ƒë·ªãnh{'\n'}
                ‚Ä¢ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng khi th·ª±c hi·ªán{'\n\n'}
                
                <Text style={{fontWeight: 'bold'}}>2. T·ªëi ∆∞u h·ªì s∆°:{'\n'}</Text>
                ‚Ä¢ C·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán chuy√™n nghi·ªáp{'\n'}
                ‚Ä¢ M√¥ t·∫£ k·ªπ nƒÉng v√† kinh nghi·ªám chi ti·∫øt{'\n'}
                ‚Ä¢ Thi·∫øt l·∫≠p khu v·ª±c l√†m vi·ªác ph√π h·ª£p{'\n\n'}
                
                <Text style={{fontWeight: 'bold'}}>3. TƒÉng thu nh·∫≠p:{'\n'}</Text>
                ‚Ä¢ Duy tr√¨ ƒë√°nh gi√° cao t·ª´ kh√°ch h√†ng{'\n'}
                ‚Ä¢ Ph·∫£n h·ªìi nhanh ch√≥ng v·ªõi kh√°ch h√†ng{'\n'}
                ‚Ä¢ Ho√†n th√†nh ƒë√∫ng th·ªùi gian cam k·∫øt
              </Text>
            </View>
          </View>
        )

      default:
        return null
    }
  }

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.screenHeader}>
        <TouchableOpacity onPress={onBack}>
          <Text style={styles.backButton}>‚Üê Quay l·∫°i</Text>
        </TouchableOpacity>
        <Text style={styles.screenTitle}>H·ªó tr·ª£ th·ª£</Text>
        <View />
      </View>

      {/* Tab Navigation */}
      <View style={styles.supportTabContainer}>
        {tabs.map((tab) => (
          <TouchableOpacity
            key={tab.id}
            style={[
              styles.supportTab,
              activeTab === tab.id && styles.activeSupportTab
            ]}
            onPress={() => setActiveTab(tab.id)}
          >
            <Text style={[
              styles.supportTabText,
              activeTab === tab.id && styles.activeSupportTabText
            ]}>
              {tab.label}
            </Text>
          </TouchableOpacity>
        ))}
      </View>

      <ScrollView style={styles.supportContent}>
        {renderTabContent()}
      </ScrollView>

      <WorkerBottomNav onTabPress={onTabPress} activeTab="workerProfile" />
    </SafeAreaView>
  )
}

export default WorkerSupportScreen
