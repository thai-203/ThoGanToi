import { useState } from "react"
import { View, Text, TouchableOpacity, SafeAreaView, FlatList, Alert } from "react-native"
import { styles } from "../../styles/styles"
import { WorkerBottomNav } from "../../components/BottomNavigation"

const WorkerNotificationScreen = ({ onTabPress, onBack }) => {
  const [notifications, setNotifications] = useState([
    {
      id: "1",
      type: "order",
      title: "ƒê∆°n h√†ng m·ªõi",
      message: "B·∫°n c√≥ ƒë∆°n h√†ng s·ª≠a ƒëi·ªán t·ª´ kh√°ch h√†ng Nguy·ªÖn VƒÉn A. Th·ªùi gian: 14:00 h√¥m nay.",
      time: "5 ph√∫t tr∆∞·ªõc",
      read: false,
      icon: "üîî",
      priority: "high",
    },
    {
      id: "2",
      type: "payment",
      title: "Thanh to√°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω",
      message: "B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c 270.000ƒë t·ª´ ƒë∆°n h√†ng #12345. Ti·ªÅn s·∫Ω ƒë∆∞·ª£c chuy·ªÉn v√†o t√†i kho·∫£n trong 24h.",
      time: "1 gi·ªù tr∆∞·ªõc",
      read: false,
      icon: "üí∞",
      priority: "medium",
    },
    {
      id: "3",
      type: "system",
      title: "C·∫≠p nh·∫≠t l·ªãch l√†m vi·ªác",
      message: "H√£y c·∫≠p nh·∫≠t l·ªãch l√†m vi·ªác c·ªßa b·∫°n ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c nhi·ªÅu ƒë∆°n h√†ng h∆°n.",
      time: "3 gi·ªù tr∆∞·ªõc",
      read: true,
      icon: "üìÖ",
      priority: "low",
    },
    {
      id: "4",
      type: "review",
      title: "ƒê√°nh gi√° m·ªõi",
      message: "Kh√°ch h√†ng Tr·∫ßn Th·ªã B ƒë√£ ƒë√°nh gi√° 5 sao cho d·ªãch v·ª• c·ªßa b·∫°n.",
      time: "1 ng√†y tr∆∞·ªõc",
      read: true,
      icon: "‚≠ê",
      priority: "medium",
    },
    {
      id: "5",
      type: "promotion",
      title: "Ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i",
      message: "Tham gia ch∆∞∆°ng tr√¨nh th·ª£ xu·∫•t s·∫Øc th√°ng ƒë·ªÉ nh·∫≠n th∆∞·ªüng 500.000ƒë.",
      time: "2 ng√†y tr∆∞·ªõc",
      read: true,
      icon: "üéâ",
      priority: "low",
    },
  ])

  const [filter, setFilter] = useState("all")

  const filteredNotifications = notifications.filter((notification) => {
    if (filter === "all") return true
    if (filter === "unread") return !notification.read
    if (filter === "high") return notification.priority === "high"
    return notification.type === filter
  })

  const handleMarkAsRead = (notificationId) => {
    setNotifications(
      notifications.map((notification) =>
        notification.id === notificationId ? { ...notification, read: true } : notification
      )
    )
  }

  const handleMarkAllAsRead = () => {
    setNotifications(notifications.map((notification) => ({ ...notification, read: true })))
    Alert.alert("Th√†nh c√¥ng", "ƒê√£ ƒë√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o l√† ƒë√£ ƒë·ªçc")
  }

  const handleDeleteNotification = (notificationId) => {
    Alert.alert("X√°c nh·∫≠n x√≥a", "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a th√¥ng b√°o n√†y?", [
      { text: "H·ªßy", style: "cancel" },
      {
        text: "X√≥a",
        style: "destructive",
        onPress: () => {
          setNotifications(notifications.filter((notification) => notification.id !== notificationId))
        },
      },
    ])
  }

  const getPriorityColor = (priority) => {
    switch (priority) {
      case "high":
        return "#ef4444"
      case "medium":
        return "#f59e0b"
      case "low":
        return "#10b981"
      default:
        return "#6b7280"
    }
  }

  const renderNotification = ({ item }) => (
    <TouchableOpacity
      style={[styles.workerNotificationCard, !item.read && styles.unreadWorkerNotificationCard]}
      onPress={() => handleMarkAsRead(item.id)}
    >
      <View style={styles.workerNotificationHeader}>
        <View style={styles.workerNotificationIconContainer}>
          <Text style={styles.workerNotificationIcon}>{item.icon}</Text>
          <View
            style={[
              styles.workerNotificationPriority,
              { backgroundColor: getPriorityColor(item.priority) },
            ]}
          />
        </View>
        <View style={styles.workerNotificationContent}>
          <Text style={[styles.workerNotificationTitle, !item.read && styles.unreadWorkerNotificationTitle]}>
            {item.title}
          </Text>
          <Text style={styles.workerNotificationMessage}>{item.message}</Text>
          <Text style={styles.workerNotificationTime}>{item.time}</Text>
        </View>
        <TouchableOpacity
          style={styles.deleteWorkerNotificationButton}
          onPress={() => handleDeleteNotification(item.id)}
        >
          <Text style={styles.deleteWorkerNotificationButtonText}>üóëÔ∏è</Text>
        </TouchableOpacity>
      </View>
      {!item.read && <View style={styles.unreadWorkerIndicator} />}
    </TouchableOpacity>
  )

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.screenHeader}>
        <TouchableOpacity onPress={onBack}>
          <Text style={styles.backButton}>‚Üê Quay l·∫°i</Text>
        </TouchableOpacity>
        <Text style={styles.screenTitle}>Th√¥ng b√°o</Text>
        <TouchableOpacity onPress={handleMarkAllAsRead}>
          <Text style={styles.markAllReadButton}>ƒê·ªçc t·∫•t c·∫£</Text>
        </TouchableOpacity>
      </View>

      {/* Filter Tabs */}
      <View style={styles.workerNotificationFilters}>
        <TouchableOpacity
          style={[styles.workerNotificationFilter, filter === "all" && styles.activeWorkerNotificationFilter]}
          onPress={() => setFilter("all")}
        >
          <Text style={[styles.workerNotificationFilterText, filter === "all" && styles.activeWorkerNotificationFilterText]}>
            T·∫•t c·∫£ ({notifications.length})
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.workerNotificationFilter, filter === "unread" && styles.activeWorkerNotificationFilter]}
          onPress={() => setFilter("unread")}
        >
          <Text style={[styles.workerNotificationFilterText, filter === "unread" && styles.activeWorkerNotificationFilterText]}>
            Ch∆∞a ƒë·ªçc ({notifications.filter((n) => !n.read).length})
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.workerNotificationFilter, filter === "high" && styles.activeWorkerNotificationFilter]}
          onPress={() => setFilter("high")}
        >
          <Text style={[styles.workerNotificationFilterText, filter === "high" && styles.activeWorkerNotificationFilterText]}>
            Quan tr·ªçng
          </Text>
        </TouchableOpacity>
      </View>

      <FlatList
        data={filteredNotifications}
        renderItem={renderNotification}
        keyExtractor={(item) => item.id}
        contentContainerStyle={styles.workerNotificationsList}
        showsVerticalScrollIndicator={false}
      />

      <WorkerBottomNav onTabPress={onTabPress} activeTab="workerProfile" />
    </SafeAreaView>
  )
}

export default WorkerNotificationScreen
