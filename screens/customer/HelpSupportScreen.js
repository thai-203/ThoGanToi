import { useState } from "react"
import { View, Text, TouchableOpacity, SafeAreaView, ScrollView, TextInput, Alert, Linking } from "react-native"
import { styles } from "../../styles/styles"
import { CustomerBottomNav } from "../../components/BottomNavigation"

const HelpSupportScreen = ({ onTabPress, onBack }) => {
  const [selectedTab, setSelectedTab] = useState("faq")
  const [contactForm, setContactForm] = useState({
    name: "",
    email: "",
    subject: "",
    message: "",
  })

  const faqData = [
    {
      id: "1",
      question: "L√†m th·∫ø n√†o ƒë·ªÉ ƒë·∫∑t d·ªãch v·ª•?",
      answer:
        "B·∫°n c√≥ th·ªÉ ƒë·∫∑t d·ªãch v·ª• b·∫±ng c√°ch: 1) Ch·ªçn lo·∫°i d·ªãch v·ª• tr√™n trang ch·ªß, 2) Ch·ªçn th·ª£ ph√π h·ª£p, 3) Ch·ªçn th·ªùi gian v√† x√°c nh·∫≠n ƒë·∫∑t.",
    },
    {
      id: "2",
      question: "T√¥i c√≥ th·ªÉ h·ªßy ƒë∆°n h√†ng kh√¥ng?",
      answer:
        "B·∫°n c√≥ th·ªÉ h·ªßy ƒë∆°n h√†ng mi·ªÖn ph√≠ tr∆∞·ªõc 2 gi·ªù so v·ªõi th·ªùi gian h·∫πn. Sau th·ªùi gian n√†y s·∫Ω c√≥ ph√≠ h·ªßy 20% gi√° tr·ªã ƒë∆°n h√†ng.",
    },
    {
      id: "3",
      question: "L√†m sao ƒë·ªÉ thanh to√°n?",
      answer:
        "Ch√∫ng t√¥i h·ªó tr·ª£ thanh to√°n qua: Ti·ªÅn m·∫∑t, chuy·ªÉn kho·∫£n, v√≠ ƒëi·ªán t·ª≠ (MoMo, ZaloPay), th·∫ª t√≠n d·ª•ng/ghi n·ª£.",
    },
    {
      id: "4",
      question: "N·∫øu kh√¥ng h√†i l√≤ng v·ªõi d·ªãch v·ª• th√¨ sao?",
      answer: "B·∫°n c√≥ th·ªÉ khi·∫øu n·∫°i trong v√≤ng 24h sau khi ho√†n th√†nh. Ch√∫ng t√¥i s·∫Ω x·ª≠ l√Ω v√† ho√†n ti·ªÅn n·∫øu l·ªói t·ª´ th·ª£.",
    },
    {
      id: "5",
      question: "Th·ªùi gian ph·∫£n h·ªìi c·ªßa th·ª£ l√† bao l√¢u?",
      answer: "Th·ª£ s·∫Ω ph·∫£n h·ªìi y√™u c·∫ßu trong v√≤ng 15-30 ph√∫t. Trong gi·ªù cao ƒëi·ªÉm c√≥ th·ªÉ m·∫•t ƒë·∫øn 1 ti·∫øng.",
    },
  ]

  const [expandedFAQ, setExpandedFAQ] = useState(null)

  const handleSubmitContact = () => {
    if (!contactForm.name || !contactForm.email || !contactForm.subject || !contactForm.message) {
      Alert.alert("L·ªói", "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin")
      return
    }

    Alert.alert("Th√†nh c√¥ng", "Y√™u c·∫ßu h·ªó tr·ª£ ƒë√£ ƒë∆∞·ª£c g·ª≠i. Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi trong v√≤ng 24h.")
    setContactForm({ name: "", email: "", subject: "", message: "" })
  }

  const handleCall = () => {
    Linking.openURL("tel:1900123456")
  }

  const handleEmail = () => {
    Linking.openURL("mailto:support@serviceapp.com")
  }

  const renderFAQ = () => (
    <View style={styles.faqContainer}>
      {faqData.map((item) => (
        <View key={item.id} style={styles.faqItem}>
          <TouchableOpacity
            style={styles.faqQuestion}
            onPress={() => setExpandedFAQ(expandedFAQ === item.id ? null : item.id)}
          >
            <Text style={styles.faqQuestionText}>{item.question}</Text>
            <Text style={styles.faqArrow}>{expandedFAQ === item.id ? "‚àí" : "+"}</Text>
          </TouchableOpacity>
          {expandedFAQ === item.id && (
            <View style={styles.faqAnswer}>
              <Text style={styles.faqAnswerText}>{item.answer}</Text>
            </View>
          )}
        </View>
      ))}
    </View>
  )

  const renderContact = () => (
    <View style={styles.contactContainer}>
      {/* Quick Contact */}
      <View style={styles.quickContactSection}>
        <Text style={styles.quickContactTitle}>Li√™n h·ªá nhanh</Text>
        <View style={styles.quickContactButtons}>
          <TouchableOpacity style={styles.quickContactButton} onPress={handleCall}>
            <Text style={styles.quickContactIcon}>üìû</Text>
            <Text style={styles.quickContactText}>G·ªçi ƒëi·ªán</Text>
            <Text style={styles.quickContactSubtext}>1900 123 456</Text>
          </TouchableOpacity>
          <TouchableOpacity style={styles.quickContactButton} onPress={handleEmail}>
            <Text style={styles.quickContactIcon}>‚úâÔ∏è</Text>
            <Text style={styles.quickContactText}>Email</Text>
            <Text style={styles.quickContactSubtext}>support@serviceapp.com</Text>
          </TouchableOpacity>
        </View>
      </View>

      {/* Contact Form */}
      <View style={styles.contactFormSection}>
        <Text style={styles.contactFormTitle}>G·ª≠i y√™u c·∫ßu h·ªó tr·ª£</Text>
        <View style={styles.contactForm}>
          <TextInput
            style={styles.contactInput}
            placeholder="H·ªç v√† t√™n"
            value={contactForm.name}
            onChangeText={(text) => setContactForm({ ...contactForm, name: text })}
          />
          <TextInput
            style={styles.contactInput}
            placeholder="Email"
            value={contactForm.email}
            onChangeText={(text) => setContactForm({ ...contactForm, email: text })}
            keyboardType="email-address"
          />
          <TextInput
            style={styles.contactInput}
            placeholder="Ch·ªß ƒë·ªÅ"
            value={contactForm.subject}
            onChangeText={(text) => setContactForm({ ...contactForm, subject: text })}
          />
          <TextInput
            style={[styles.contactInput, styles.contactTextArea]}
            placeholder="M√¥ t·∫£ v·∫•n ƒë·ªÅ..."
            value={contactForm.message}
            onChangeText={(text) => setContactForm({ ...contactForm, message: text })}
            multiline
            numberOfLines={4}
          />
          <TouchableOpacity style={styles.submitContactButton} onPress={handleSubmitContact}>
            <Text style={styles.submitContactButtonText}>G·ª≠i y√™u c·∫ßu</Text>
          </TouchableOpacity>
        </View>
      </View>
    </View>
  )

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.screenHeader}>
        <TouchableOpacity onPress={onBack}>
          <Text style={styles.backButton}>‚Üê Quay l·∫°i</Text>
        </TouchableOpacity>
        <Text style={styles.screenTitle}>H·ªó tr·ª£</Text>
        <View />
      </View>

      {/* Tabs */}
      <View style={styles.helpTabContainer}>
        <TouchableOpacity
          style={[styles.helpTab, selectedTab === "faq" && styles.activeHelpTab]}
          onPress={() => setSelectedTab("faq")}
        >
          <Text style={[styles.helpTabText, selectedTab === "faq" && styles.activeHelpTabText]}>
            C√¢u h·ªèi th∆∞·ªùng g·∫∑p
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.helpTab, selectedTab === "contact" && styles.activeHelpTab]}
          onPress={() => setSelectedTab("contact")}
        >
          <Text style={[styles.helpTabText, selectedTab === "contact" && styles.activeHelpTabText]}>Li√™n h·ªá</Text>
        </TouchableOpacity>
      </View>

      <ScrollView style={styles.helpContent} showsVerticalScrollIndicator={false}>
        {selectedTab === "faq" ? renderFAQ() : renderContact()}
      </ScrollView>

      <CustomerBottomNav onTabPress={onTabPress} activeTab="profile" />
    </SafeAreaView>
  )
}

export default HelpSupportScreen
