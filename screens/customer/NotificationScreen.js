import { useState } from "react"
import { View, Text, TouchableOpacity, SafeAreaView, FlatList, Alert } from "react-native"
import { styles } from "../../styles/styles"
import { CustomerBottomNav } from "../../components/BottomNavigation"

const NotificationScreen = ({ onTabPress, onBack }) => {
  const [notifications, setNotifications] = useState([
    {
      id: "1",
      type: "booking",
      title: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n",
      message: "Th·ª£ Minh Tu·∫•n ƒë√£ x√°c nh·∫≠n ƒë∆°n s·ª≠a ƒëi·ªán c·ªßa b·∫°n. D·ª± ki·∫øn ho√†n th√†nh l√∫c 14:00 h√¥m nay.",
      time: "5 ph√∫t tr∆∞·ªõc",
      read: false,
      icon: "‚úÖ",
    },
    {
      id: "2",
      type: "promotion",
      title: "∆Øu ƒë√£i ƒë·∫∑c bi·ªát cho b·∫°n!",
      message: "Gi·∫£m 30% cho d·ªãch v·ª• s·ª≠a ch·ªØa ƒëi·ªán - n∆∞·ªõc. √Åp d·ª•ng ƒë·∫øn 31/12/2024.",
      time: "2 gi·ªù tr∆∞·ªõc",
      read: false,
      icon: "üéÅ",
    },
    {
      id: "3",
      type: "booking",
      title: "ƒê∆°n h√†ng ho√†n th√†nh",
      message: "C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•. ƒê√°nh gi√° tr·∫£i nghi·ªám ƒë·ªÉ gi√∫p ch√∫ng t√¥i c·∫£i thi·ªán.",
      time: "1 ng√†y tr∆∞·ªõc",
      read: true,
      icon: "‚≠ê",
    },
    {
      id: "4",
      type: "system",
      title: "C·∫≠p nh·∫≠t ·ª©ng d·ª•ng",
      message: "Phi√™n b·∫£n m·ªõi v·ªõi nhi·ªÅu t√≠nh nƒÉng th√∫ v·ªã ƒë√£ c√≥ s·∫µn. C·∫≠p nh·∫≠t ngay!",
      time: "2 ng√†y tr∆∞·ªõc",
      read: true,
      icon: "üîÑ",
    },
    {
      id: "5",
      type: "payment",
      title: "Thanh to√°n th√†nh c√¥ng",
      message: "B·∫°n ƒë√£ thanh to√°n 300.000ƒë cho d·ªãch v·ª• s·ª≠a ƒëi·ªán. M√£ GD: #TX123456",
      time: "3 ng√†y tr∆∞·ªõc",
      read: true,
      icon: "üí≥",
    },
  ])

  const [activeTab, setActiveTab] = useState("all")

  const filteredNotifications = notifications.filter((notification) => {
    if (activeTab === "all") return true
    if (activeTab === "unread") return !notification.read
    return notification.type === activeTab
  })

  const handleMarkAsRead = (notificationId) => {
    setNotifications(
      notifications.map((notification) =>
        notification.id === notificationId ? { ...notification, read: true } : notification,
      ),
    )
  }

  const handleMarkAllAsRead = () => {
    setNotifications(notifications.map((notification) => ({ ...notification, read: true })))
    Alert.alert("Th√†nh c√¥ng", "ƒê√£ ƒë√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o l√† ƒë√£ ƒë·ªçc")
  }

  const handleDeleteNotification = (notificationId) => {
    Alert.alert("X√°c nh·∫≠n x√≥a", "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a th√¥ng b√°o n√†y?", [
      { text: "H·ªßy", style: "cancel" },
      {
        text: "X√≥a",
        style: "destructive",
        onPress: () => {
          setNotifications(notifications.filter((notification) => notification.id !== notificationId))
        },
      },
    ])
  }

  const getNotificationTypeColor = (type) => {
    switch (type) {
      case "booking":
        return "#3b82f6"
      case "promotion":
        return "#f59e0b"
      case "payment":
        return "#10b981"
      case "system":
        return "#8b5cf6"
      default:
        return "#6b7280"
    }
  }

  const renderNotification = ({ item }) => (
    <TouchableOpacity
      style={[styles.notificationCard, !item.read && styles.unreadNotificationCard]}
      onPress={() => handleMarkAsRead(item.id)}
    >
      <View style={styles.notificationHeader}>
        <View style={styles.notificationIconContainer}>
          <Text style={styles.notificationIcon}>{item.icon}</Text>
        </View>
        <View style={styles.notificationContent}>
          <Text style={[styles.notificationTitle, !item.read && styles.unreadNotificationTitle]}>{item.title}</Text>
          <Text style={styles.notificationMessage}>{item.message}</Text>
          <Text style={styles.notificationTime}>{item.time}</Text>
        </View>
        <View style={styles.notificationActions}>
          {!item.read && <View style={styles.unreadDot} />}
          <TouchableOpacity onPress={() => handleDeleteNotification(item.id)}>
            <Text style={styles.deleteNotificationButton}>üóëÔ∏è</Text>
          </TouchableOpacity>
        </View>
      </View>
    </TouchableOpacity>
  )

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.screenHeader}>
        <TouchableOpacity onPress={onBack}>
          <Text style={styles.backButton}>‚Üê Quay l·∫°i</Text>
        </TouchableOpacity>
        <Text style={styles.screenTitle}>Th√¥ng b√°o</Text>
        <TouchableOpacity onPress={handleMarkAllAsRead}>
          <Text style={styles.markAllReadButton}>ƒê·ªçc t·∫•t c·∫£</Text>
        </TouchableOpacity>
      </View>

      {/* Tabs */}
      <View style={styles.notificationTabContainer}>
        <TouchableOpacity
          style={[styles.notificationTab, activeTab === "all" && styles.activeNotificationTab]}
          onPress={() => setActiveTab("all")}
        >
          <Text style={[styles.notificationTabText, activeTab === "all" && styles.activeNotificationTabText]}>
            T·∫•t c·∫£ ({notifications.length})
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[styles.notificationTab, activeTab === "unread" && styles.activeNotificationTab]}
          onPress={() => setActiveTab("unread")}
        >
          <Text style={[styles.notificationTabText, activeTab === "unread" && styles.activeNotificationTabText]}>
            Ch∆∞a ƒë·ªçc ({notifications.filter((n) => !n.read).length})
          </Text>
        </TouchableOpacity>
      </View>

      <FlatList
        data={filteredNotifications}
        renderItem={renderNotification}
        keyExtractor={(item) => item.id}
        contentContainerStyle={styles.notificationsList}
        showsVerticalScrollIndicator={false}
      />

      <CustomerBottomNav onTabPress={onTabPress} activeTab="profile" />
    </SafeAreaView>
  )
}

export default NotificationScreen
