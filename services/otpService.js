import { __DEV__ } from "../config/appConfig" // Import __DEV__ variable

class OTPService {
  constructor() {
    this.otpStorage = new Map() // L∆∞u t·∫°m OTP trong memory (production n√™n d√πng Redis)
    this.otpExpiry = 5 * 60 * 1000 // 5 ph√∫t
  }

  // T·∫°o m√£ OTP 6 s·ªë
  generateOTP() {
    return Math.floor(100000 + Math.random() * 900000).toString()
  }

  // G·ª≠i OTP (gi·∫£ l·∫≠p g·ª≠i SMS)
  async sendOTP(phone) {
    try {
      const otp = this.generateOTP()
      const expiryTime = Date.now() + this.otpExpiry

      // L∆∞u OTP v·ªõi th·ªùi gian h·∫øt h·∫°n
      this.otpStorage.set(phone, {
        otp: otp,
        expiryTime: expiryTime,
        attempts: 0,
      })

      // Gi·∫£ l·∫≠p g·ª≠i SMS (trong th·ª±c t·∫ø s·∫Ω t√≠ch h·ª£p v·ªõi Twilio, Firebase SMS, etc.)
      console.log(`üì± SMS sent to ${phone}: Your OTP is ${otp}`)

      // Trong m√¥i tr∆∞·ªùng development, hi·ªÉn th·ªã OTP
      if (__DEV__) {
        console.log(`üîê DEBUG - OTP for ${phone}: ${otp}`)
      }

      return {
        success: true,
        message: "M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn s·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n",
        // Trong development, tr·∫£ v·ªÅ OTP ƒë·ªÉ test
        ...(__DEV__ ? { otp: otp } : {}),
      }
    } catch (error) {
      console.error("Error sending OTP:", error)
      return {
        success: false,
        message: "Kh√¥ng th·ªÉ g·ª≠i m√£ OTP. Vui l√≤ng th·ª≠ l·∫°i.",
      }
    }
  }

  // X√°c th·ª±c OTP
  verifyOTP(phone, inputOTP) {
    try {
      const otpData = this.otpStorage.get(phone)

      if (!otpData) {
        return {
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y m√£ OTP. Vui l√≤ng y√™u c·∫ßu g·ª≠i l·∫°i.",
        }
      }

      // Ki·ªÉm tra h·∫øt h·∫°n
      if (Date.now() > otpData.expiryTime) {
        this.otpStorage.delete(phone)
        return {
          success: false,
          message: "M√£ OTP ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu g·ª≠i l·∫°i.",
        }
      }

      // Ki·ªÉm tra s·ªë l·∫ßn th·ª≠
      if (otpData.attempts >= 3) {
        this.otpStorage.delete(phone)
        return {
          success: false,
          message: "B·∫°n ƒë√£ nh·∫≠p sai qu√° nhi·ªÅu l·∫ßn. Vui l√≤ng y√™u c·∫ßu g·ª≠i l·∫°i.",
        }
      }

      // Ki·ªÉm tra OTP
      if (otpData.otp === inputOTP.toString()) {
        this.otpStorage.delete(phone) // X√≥a OTP sau khi x√°c th·ª±c th√†nh c√¥ng
        return {
          success: true,
          message: "X√°c th·ª±c th√†nh c√¥ng!",
        }
      } else {
        // TƒÉng s·ªë l·∫ßn th·ª≠
        otpData.attempts += 1
        this.otpStorage.set(phone, otpData)

        return {
          success: false,
          message: `M√£ OTP kh√¥ng ƒë√∫ng. C√≤n ${3 - otpData.attempts} l·∫ßn th·ª≠.`,
        }
      }
    } catch (error) {
      console.error("Error verifying OTP:", error)
      return {
        success: false,
        message: "L·ªói x√°c th·ª±c. Vui l√≤ng th·ª≠ l·∫°i.",
      }
    }
  }

  // X√≥a OTP (khi user h·ªßy ho·∫∑c timeout)
  clearOTP(phone) {
    this.otpStorage.delete(phone)
  }

  // Ki·ªÉm tra OTP c√≤n hi·ªáu l·ª±c
  isOTPValid(phone) {
    const otpData = this.otpStorage.get(phone)
    if (!otpData) return false
    return Date.now() <= otpData.expiryTime
  }

  // L·∫•y th·ªùi gian c√≤n l·∫°i c·ªßa OTP
  getOTPTimeRemaining(phone) {
    const otpData = this.otpStorage.get(phone)
    if (!otpData) return 0

    const remaining = otpData.expiryTime - Date.now()
    return Math.max(0, Math.ceil(remaining / 1000)) // Tr·∫£ v·ªÅ gi√¢y
  }
}

export default new OTPService()
