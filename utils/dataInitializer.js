import UserService from "../services/userService"
import WorkerService from "../services/workerService"
import ServiceService from "../services/serviceService"
import FirebaseService from "../services/firebaseService"

// Initial data to populate Firebase
const initialUsers = [
  // Admin users
  {
    phone: "0123456789",
    password: "123456",
    role: "admin",
    name: "Admin Nguy·ªÖn",
    email: "admin@example.com",
    status: "active",
  },
  {
    phone: "0987654321",
    password: "123456",
    role: "admin",
    name: "Admin Tr·∫ßn",
    email: "admin2@example.com",
    status: "active",
  },

  // Customer users
  {
    phone: "0111111111",
    password: "123456",
    role: "customer",
    name: "Nguy·ªÖn VƒÉn A",
    email: "customer1@example.com",
    status: "active",
    joinDate: "2024-01-01",
    area: "Qu·∫≠n 1, TP.HCM",
  },
  {
    phone: "0222222222",
    password: "123456",
    role: "customer",
    name: "Tr·∫ßn Th·ªã B",
    email: "customer2@example.com",
    status: "active",
    joinDate: "2024-01-05",
    area: "Qu·∫≠n 3, TP.HCM",
  },
  {
    phone: "0333333333",
    password: "123456",
    role: "customer",
    name: "L√™ VƒÉn C",
    email: "customer3@example.com",
    status: "active", // Changed from blocked to active
    joinDate: "2024-01-10",
    area: "Qu·∫≠n 7, TP.HCM",
  },

  // Worker users (basic info only)
  {
    phone: "0444444444",
    password: "123456",
    role: "worker",
    name: "Th·ª£ Minh Tu·∫•n",
    email: "worker1@example.com",
    status: "active",
    joinDate: "2024-01-02",
    area: "Qu·∫≠n 1, TP.HCM",
  },
  {
    phone: "0555555555",
    password: "123456",
    role: "worker",
    name: "Th·ª£ VƒÉn Nam",
    email: "worker2@example.com",
    status: "active",
    joinDate: "2024-01-15",
    area: "Qu·∫≠n 3, TP.HCM",
  },
  {
    phone: "0666666666",
    password: "123456",
    role: "worker",
    name: "Th·ª£ Ho√†ng Long",
    email: "worker3@example.com",
    status: "active",
    joinDate: "2024-01-08",
    area: "Qu·∫≠n 7, TP.HCM",
  },
]

// Worker profiles (separate table)
const initialWorkers = [
  {
    userId: "user_worker_1", // Will be replaced with actual user ID
    name: "Th·ª£ Minh Tu·∫•n",
    phone: "0444444444",
    email: "worker1@example.com",
    specialty: "Th·ª£ ƒëi·ªán",
    status: "active",
    area: "Qu·∫≠n 1, TP.HCM",
    rating: 4.8,
    completedOrders: 127,
    certificate: "Ch·ª©ng ch·ªâ ƒëi·ªán c√¥ng nghi·ªáp",
    experience: "5 nƒÉm kinh nghi·ªám",
    price: "150,000ƒë/gi·ªù",
    avatar: "üë®‚Äçüîß",
    reviews: 127,
    joinDate: "2024-01-02",
  },
  {
    userId: "user_worker_2",
    name: "Th·ª£ VƒÉn Nam",
    phone: "0555555555",
    email: "worker2@example.com",
    specialty: "Th·ª£ n∆∞·ªõc",
    status: "pending", // This one is pending approval
    area: "Qu·∫≠n 3, TP.HCM",
    rating: 4.6,
    completedOrders: 89,
    certificate: "Ch·ª©ng ch·ªâ k·ªπ thu·∫≠t n∆∞·ªõc",
    experience: "3 nƒÉm kinh nghi·ªám",
    price: "120,000ƒë/gi·ªù",
    avatar: "üë®‚Äçüîß",
    reviews: 89,
    joinDate: "2024-01-15",
  },
  {
    userId: "user_worker_3",
    name: "Th·ª£ Ho√†ng Long",
    phone: "0666666666",
    email: "worker3@example.com",
    specialty: "Th·ª£ m√°y l·∫°nh",
    status: "active",
    area: "Qu·∫≠n 7, TP.HCM",
    rating: 4.9,
    completedOrders: 203,
    certificate: "Ch·ª©ng ch·ªâ ƒëi·ªán l·∫°nh",
    experience: "7 nƒÉm kinh nghi·ªám",
    price: "180,000ƒë/gi·ªù",
    avatar: "üë®‚Äçüîß",
    reviews: 203,
    joinDate: "2024-01-08",
  },
]

const initialServices = [
  {
    name: "Th·ª£ ƒëi·ªán",
    icon: "‚ö°",
    color: "#fbbf24",
    suggestedPrice: "150,000ƒë/gi·ªù",
    description: "S·ª≠a ch·ªØa, l·∫Øp ƒë·∫∑t h·ªá th·ªëng ƒëi·ªán",
    status: "active",
  },
  {
    name: "Th·ª£ n∆∞·ªõc",
    icon: "üö∞",
    color: "#3b82f6",
    suggestedPrice: "120,000ƒë/gi·ªù",
    description: "S·ª≠a ch·ªØa ƒë∆∞·ªùng ·ªëng n∆∞·ªõc, v√≤i sen",
    status: "active",
  },
  {
    name: "Th·ª£ m√°y l·∫°nh",
    icon: "‚ùÑÔ∏è",
    color: "#06b6d4",
    suggestedPrice: "200,000ƒë/gi·ªù",
    description: "S·ª≠a ch·ªØa, b·∫£o tr√¨ m√°y l·∫°nh",
    status: "active",
  },
  {
    name: "Th·ª£ IT",
    icon: "üíª",
    color: "#8b5cf6",
    suggestedPrice: "180,000ƒë/gi·ªù",
    description: "S·ª≠a ch·ªØa m√°y t√≠nh, laptop",
    status: "active",
  },
  {
    name: "Gi·∫∑t gh·∫ø sofa",
    icon: "üõãÔ∏è",
    color: "#10b981",
    suggestedPrice: "300,000ƒë/b·ªô",
    description: "V·ªá sinh gh·∫ø sofa chuy√™n nghi·ªáp",
    status: "active",
  },
  {
    name: "V·ªá sinh nh√†",
    icon: "üßπ",
    color: "#f59e0b",
    suggestedPrice: "100,000ƒë/gi·ªù",
    description: "D·ªçn d·∫πp nh√† c·ª≠a theo gi·ªù",
    status: "active",
  },
  {
    name: "S·ª≠a xe m√°y",
    icon: "üèçÔ∏è",
    color: "#ef4444",
    suggestedPrice: "80,000ƒë/l·∫ßn",
    description: "S·ª≠a ch·ªØa xe m√°y t·∫°i nh√†",
    status: "inactive",
  },
  {
    name: "Th·ª£ m·ªôc",
    icon: "üî®",
    color: "#84cc16",
    suggestedPrice: "160,000ƒë/gi·ªù",
    description: "L√†m ƒë·ªì g·ªó, s·ª≠a ch·ªØa n·ªôi th·∫•t",
    status: "active",
  },
]

class DataInitializer {
  async checkFirebaseConnection() {
    try {
      const isConnected = await FirebaseService.checkConnection()
      if (!isConnected) {
        console.warn("Firebase connection not available, using offline mode")
        return false
      }
      return true
    } catch (error) {
      console.error("Error checking Firebase connection:", error)
      return false
    }
  }

  async initializeData() {
    try {
      console.log("Checking Firebase connection...")

      // Check if Firebase is available
      const isConnected = await this.checkFirebaseConnection()
      if (!isConnected) {
        console.log("Firebase not available, skipping data initialization")
        return false
      }

      console.log("Initializing Firebase data...")

      // Check if data already exists
      const existingUsers = await UserService.getAllUsers()
      if (existingUsers.length > 0) {
        console.log("Data already exists, skipping initialization")
        return true
      }

      // Initialize users first
      console.log("Creating users...")
      const userIdMap = new Map() // To track user IDs for workers

      for (const user of initialUsers) {
        try {
          const userId = await UserService.createUser(user)
          if (user.role === "worker") {
            userIdMap.set(user.phone, userId)
          }
          console.log(`‚úÖ Created user: ${user.name} (${user.role})`)
        } catch (error) {
          console.error("Error creating user:", user.name, error)
        }
      }

      // Initialize worker profiles
      console.log("Creating worker profiles...")
      for (const worker of initialWorkers) {
        try {
          // Find the corresponding user ID
          const userId = userIdMap.get(worker.phone)
          if (userId) {
            const workerData = { ...worker, userId }
            await WorkerService.createWorker(workerData)
            console.log(`‚úÖ Created worker profile: ${worker.name}`)
          } else {
            console.warn(`‚ö†Ô∏è No user found for worker: ${worker.name}`)
          }
        } catch (error) {
          console.error("Error creating worker:", worker.name, error)
        }
      }

      // Initialize services
      console.log("Creating services...")
      for (const service of initialServices) {
        try {
          await ServiceService.createService(service)
          console.log(`‚úÖ Created service: ${service.name}`)
        } catch (error) {
          console.error("Error creating service:", service.name, error)
        }
      }

      console.log("üéâ Firebase data initialization completed!")
      return true
    } catch (error) {
      console.error("Error initializing Firebase data:", error)
      return false
    }
  }

  async resetData() {
    try {
      console.log("Resetting Firebase data...")

      // This would require admin privileges in a real app
      // For now, we'll just reinitialize
      await this.initializeData()

      console.log("Firebase data reset completed!")
      return true
    } catch (error) {
      console.error("Error resetting Firebase data:", error)
      return false
    }
  }
}

export default new DataInitializer()
